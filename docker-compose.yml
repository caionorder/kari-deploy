version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: kariajuda-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-kariajuda}
      POSTGRES_USER: ${DB_USER:-kariajuda}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-kariajuda123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - kariajuda-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-kariajuda}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: kariajuda-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - kariajuda-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API - api.kariajuda.com
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: kariajuda-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://${DB_USER:-kariajuda}:${DB_PASSWORD:-kariajuda123}@postgres:5432/${DB_NAME:-kariajuda}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # JWT Secret
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      
      # CORS - Configured for production subdomains and development
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-'["https://kariajuda.com","https://www.kariajuda.com","https://admin.kariajuda.com","https://api.kariajuda.com","http://localhost:3000","http://localhost:3002","http://localhost:8000"]'}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-production}
      
      # Domain
      SERVER_HOST: https://api.kariajuda.com
      
      # Email
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      EMAILS_FROM_EMAIL: ${EMAILS_FROM_EMAIL:-noreply@kariajuda.com}
      
      # Payment Gateway
      PAYMENT_API_KEY: ${PAYMENT_API_KEY:-}
      PAYMENT_SECRET_KEY: ${PAYMENT_SECRET_KEY:-}
    volumes:
      - api_static:/app/static
      - api_media:/app/media
    networks:
      - kariajuda-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.kariajuda.com`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

  # Site Frontend - kariajuda.com
  site:
    build:
      context: ./site
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-https://api.kariajuda.com}
    container_name: kariajuda-site
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - kariajuda-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.site.rule=Host(`kariajuda.com`) || Host(`www.kariajuda.com`)"
      - "traefik.http.routers.site.tls=true"
      - "traefik.http.routers.site.tls.certresolver=letsencrypt"
      - "traefik.http.services.site.loadbalancer.server.port=80"
      # Redirect www to non-www
      - "traefik.http.middlewares.redirect-www.redirectregex.regex=^https://www\\.(.*)"
      - "traefik.http.middlewares.redirect-www.redirectregex.replacement=https://$${1}"
      - "traefik.http.routers.site.middlewares=redirect-www"

  # Admin Panel - admin.kariajuda.com
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL:-https://api.kariajuda.com/api/v1}
    container_name: kariajuda-admin
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - kariajuda-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.kariajuda.com`)"
      - "traefik.http.routers.admin.tls=true"
      - "traefik.http.routers.admin.tls.certresolver=letsencrypt"
      - "traefik.http.services.admin.loadbalancer.server.port=80"
      # Basic auth for admin (optional)
      # - "traefik.http.routers.admin.middlewares=auth"
      # - "traefik.http.middlewares.auth.basicauth.users=admin:$$2y$$10$$..."

  # Traefik Reverse Proxy with SSL
  traefik:
    image: traefik:v2.10
    container_name: kariajuda-traefik
    restart: unless-stopped
    command:
      # API
      - "--api.dashboard=true"
      - "--api.debug=false"
      # Providers
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Redirect HTTP to HTTPS
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # Let's Encrypt
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${LETSENCRYPT_EMAIL:-admin@kariajuda.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # Logs
      - "--log.level=INFO"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
      - "./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro"
    networks:
      - kariajuda-network
    labels:
      - "traefik.enable=true"
      # Dashboard
      - "traefik.http.routers.dashboard.rule=Host(`traefik.kariajuda.com`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USER:-admin:$$2y$$10$$...}"

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: kariajuda-backup
    depends_on:
      - postgres
    environment:
      PGHOST: postgres
      PGDATABASE: ${DB_NAME:-kariajuda}
      PGUSER: ${DB_USER:-kariajuda}
      PGPASSWORD: ${DB_PASSWORD:-kariajuda123}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - kariajuda-network
    entrypoint: ["/bin/sh"]
    command: ["-c", "while true; do /backup.sh; sleep 86400; done"]

networks:
  kariajuda-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_static:
    driver: local
  api_media:
    driver: local